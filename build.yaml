---
####################################################
#       Pipeline Configuration                     #
####################################################
BuildWorkflow:
  '.':
    - build
    - test

  build:
    - Clean
    - Build_Module_ModuleBuilder
    - Build_NestedModules_ModuleBuilder
    - Create_Changelog_Release_Output

  docs:
    - Generate_Conceptual_Help
    - Generate_Wiki_Content
    - Generate_Markdown_For_Public_Commands
    - Generate_External_Help_File_For_Public_Commands
    - Clean_Markdown_Of_Public_Commands
    - Generate_Wiki_Sidebar
    - Clean_Markdown_Metadata
    - Package_WikContent

  pack:
    - build
    - package_module_nupkg

  hqrmtest:
    - DscResource_Tests_Stop_On_Fail

  test:
    - Pester_Tests_Stop_On_Fail
    - Pester_If_Code_Coverage_Under_Threshold

  publish:
    - publish_module_to_gallery
    - Publish_Release_To_GitHub
    - Publish_GitHub_Wiki_Content
    - Create_ChangeLog_GitHub_PR

  Package_WikContent: |
    {
        param
        (
            $OutputDirectory = (property OutputDirectory (Join-Path $BuildRoot 'output')),
            $ProjectName = (property ProjectName $(Get-SamplerProjectName -BuildRoot $BuildRoot)),
            $BuildInfo = (property BuildInfo @{ })
        )

        "`tProject Name             = {0}" -f $ProjectName
        "`tOutput Directory         = {0}" -f $OutputDirectory

        $wikiOutputPath = Join-Path -Path $OutputDirectory -ChildPath 'WikiContent'
        $wikiArchiveSourcePath = Join-Path -Path $wikiOutputPath -ChildPath '*'
        $wikiPackagePath = Join-Path -Path $OutputDirectory -ChildPath 'WikiContent.zip'

        "`tWiki Output Path         = $wikiOutputPath"
        "`tWiki Archive Source Path = $wikiArchiveSourcePath"
        "`tWiki Package Path        = $wikiPackagePath"

        if (-not (Test-Path -Path $wikiOutputPath))
        {
            throw 'The Wiki Output Path does not exist. Please run the task Generate_Wiki_Content prior to running this task.'
        }

        # Overwrites any existing archive.
        Compress-Archive -Path $wikiArchiveSourcePath -DestinationPath $wikiPackagePath -CompressionLevel 'Optimal' -Force -ErrorAction 'Stop'
    }

####################################################
#          ModuleBuilder Configuration             #
####################################################
CopyPaths:
  - en-US
  - DSCResources
  - Modules
Prefix: prefix.ps1
Suffix: suffix.ps1
Encoding: UTF8
VersionedOutputDirectory: true
BuiltModuleSubdirectory: builtModule

ModuleBuildTasks:
  Sampler:
    - '*.build.Sampler.ib.tasks'
  Sampler.GitHubTasks:
    - '*.ib.tasks'
  DscResource.DocGenerator:
    - 'Task.*'
  DscResource.Test:
    - 'Task.*'

TaskHeader: |
  param($Path)
  ""
  "=" * 79
  Write-Build Cyan "`t`t`t$($Task.Name.replace("_"," ").ToUpper())"
  Write-Build DarkGray  "$(Get-BuildSynopsis $Task)"
  "-" * 79
  Write-Build DarkGray "  $Path"
  Write-Build DarkGray "  $($Task.InvocationInfo.ScriptName):$($Task.InvocationInfo.ScriptLineNumber)"
  ""

####################################################
#     Dependent Modules Configuration (Sampler)    #
####################################################
NestedModule:
  DscResource.Common:
    CopyOnly: true
    Path: ./output/RequiredModules/DscResource.Common
    AddToManifest: false
    Exclude: PSGetModuleInfo.xml

####################################################
#          Pester Configuration (Sampler)          #
####################################################
Pester:
  Configuration:
    Run:
      Path:
        - tests/Unit
    Output:
      Verbosity: Detailed
      StackTraceVerbosity: Full
      CIFormat: Auto
    CodeCoverage:
      CoveragePercentTarget: 80
      OutputPath: JaCoCo_coverage.xml
      OutputEncoding: ascii
      UseBreakpoints: false
    TestResult:
      OutputFormat: NUnitXML
      OutputEncoding: ascii
  ExcludeFromCodeCoverage:
    - Modules/DscResource.Common

####################################################
#      Pester Configuration (DscResource.Test)     #
####################################################
DscTest:
  OutputFormat: NUnitXML
  ExcludeTag:
    - 'Common Tests - New Error-Level Script Analyzer Rules'
  ExcludeSourceFile:
    - output
  ExcludeModuleFile:
    - Modules/DscResource.Common
  MainGitBranch: main

####################################################
#              PSDepend Configuration              #
####################################################
Resolve-Dependency:
  Gallery: 'PSGallery'
  AllowPrerelease: false
  Verbose: false

####################################################
#               GitHub Configuration               #
####################################################
GitHubConfig:
  GitHubFilesToAdd:
    - 'CHANGELOG.md'
  ReleaseAssets:
    - output/WikiContent.zip
  GitHubConfigUserName: dscbot # cSpell: disable-line
  GitHubConfigUserEmail: dsccommunity@outlook.com
  UpdateChangelogOnPrerelease: false

####################################################
#      DscResource.DocGenerator Configuration      #
####################################################
DscResource.DocGenerator:
  Generate_Conceptual_Help:
    MarkdownCodeRegularExpression:
      - '\`(.+?)\`' # Match inline code-block
      - '\\(\\)' # Match escaped backslash
      - '\[[^\[]+\]\((.+?)\)' # Match markdown URL
      - '_(.+?)_' # Match Italic (underscore)
      - '\*\*(.+?)\*\*' # Match bold
      - '\*(.+?)\*' # Match Italic (asterisk)
  Publish_GitHub_Wiki_Content:
    Debug: false
  Generate_Wiki_Content:
    MofResourceMetadata:
      Type: MofResource
      Category: Resources
    ClassResourceMetadata:
      Type: ClassResource
      Category: Resources
    CompositeResourceMetadata:
      Type: CompositeResource
      Category: Resources
  Generate_Wiki_Sidebar:
     Debug: false
     AlwaysOverwrite: true
